<?php

// Config variables
global $defaultConfigString, $psFile;
$defaultConfigString = 'imageScaleMethod: "fitNoUpscale",
allowRotationOnUserZoom: false,
getImageCaption: function(el) {
	return el.getAttribute("title");
}';
$psFile = 'code.photoswipe-2.0.0.min.js'; // used in photoswipe.install as well

/**
 * Implements hook_help().
 */
function photoswipe_help($path, $arg) {
  switch ($path) {
    // Main module help for the photoswipe module
    case 'admin/help#photoswipe':
      return '<p>' . t('PhotoSwipe provides a nice javascript-based display for photo galleries, very sleek on mobile browsers.', array('!website' => l(t('PhotoSwipe website'), 'http://www.photoswipe.com/'))) . '</p>';
  }
}

/**
 * Implements hook_init().
 */
function photoswipe_init() {
  // Load photoswipe only on specified nodes
  if (variable_get('photoswipe_enabled', TRUE)
         && photoswipe_active_url()
         && !drupal_match_path('filter/tips', $_GET['q'])
         && photoswipe_active_nodetype()
         && $path = libraries_get_path('photoswipe')) {

    $useJquery = variable_get('photoswipe_use_jquery', FALSE);
    drupal_add_js($path . '/lib/klass.min.js');

    if ($useJquery) {
      drupal_add_js($path . '/lib/jquery-1.6.2.min.js');
      drupal_add_js($path . '/code.photoswipe.jquery-2.0.0.min.js');
      drupal_add_js(drupal_get_path('module', 'photoswipe') . '/photoswipe.jquery.js');
    }
    else {
      global $psFile;
      drupal_add_js($path . '/' . $psFile);
      drupal_add_js(drupal_get_path('module', 'photoswipe') . '/photoswipe.js');
    }
    drupal_add_css($path . '/photoswipe.css');


    // Pass variables to photoswipe.jquery.js
    global $defaultConfigString;
    drupal_add_js(array(
      'photoswipe' => array(
        'useJquery' => $useJquery,
        'configString' => variable_get('photoswipe_custom_config', $defaultConfigString),
      ),
    ), array('type' => 'setting', 'scope' => JS_DEFAULT));
    drupal_add_js('var photoswipeConfig = {' . variable_get('photoswipe_custom_config', $defaultConfigString) . '};', array('type' => 'inline', 'scope' => JS_DEFAULT));
  }
}

/**
 * Verify that PhotoSwipe should be active for the current URL.
 */
function photoswipe_active_url() {
  $pages = variable_get('photoswipe_pages', "");
  if (variable_get('photoswipe_active_type', 'disable') == 'disable') {
    $pages .= "admin*\nnode/add/*\nnode/*/edit"; // disable admin and edit pages
  }

  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
  }
  if (variable_get('photoswipe_active_type', 'disable') == 'disable') {
    return !$page_match;
  }
  else {
    return $page_match;
  }
}

/**
 * Verify that PhotoSwipe should be active for the current node type.
 */
function photoswipe_active_nodetype() {
  $node = menu_get_object();
  $photoswipe_types = variable_get('photoswipe_nodetypes', array());

  if (count($photoswipe_types) > 0) {
    if (is_integer(max($photoswipe_types))) { // check whether any node type has been selected
      return TRUE; // return true if no type has been selected
    }
    else {
      return in_array($node->type, $photoswipe_types, $strict = TRUE); // strict is needed to compare with the values and not the keys
    }
  }
  else {
    return TRUE; // return true if no type has been selected
  }


}

/**
 * Implements hook_permission().
 */
function photoswipe_permission() {
  return array(
    'administer photoswipe' => array(
      'title' => t('administer photoswipe'),
      'description' => t('TODO Add a description for \'administer photoswipe\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function photoswipe_menu() {
  $items = array();
  $items['admin/config/media/photoswipe'] = array(
    'title' => 'PhotoSwipe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photoswipe_admin_settings'),
    'access arguments' => array('administer photoswipe'),
    'description' => 'Configure global settings for PhotoSwipe.',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Configure global settings for PhotoSwipe.
 */
function photoswipe_admin_settings($form, &$form_state) {
  $form['photoswipe']['photoswipe_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Global switch'),
    '#default_value' => variable_get('photoswipe_enabled', TRUE),
    '#description' => t('Check this box to enable PhotoSwipe on your site.'),
  );
  $form['photoswipe']['photoswipe_use_jquery'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use jQuery to load PhotoSwipe'),
    '#default_value' => variable_get('photoswipe_use_jquery', FALSE),
    '#description' => t('Warning: although this offers better support of desktop browser (in particular IE), it loads a much newer version of jQuery than the Drupal one which is likely to create incompatibility with other modules. Use at your own risk!'),
  );
  global $defaultConfigString;
  $form['photoswipe']['photoswipe_custom_config'] = array(
    '#type' => 'textarea',
    '#title' => t('Custom configuration'),
    '#default_value' => variable_get('photoswipe_custom_config', $defaultConfigString),
    '#description' => t("(Advanced users only) You can customize PhotoSwipe options using a javascript object declaration."),
  );
  $form['photoswipe']['url'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page specific activation settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['photoswipe']['url']['photoswipe_active_type'] = array(
    '#type' => 'radios',
    '#title' => t('Enable PhotoSwipe on specific pages'),
    '#options' => array(
      'disable' => 'Enable on every page except the listed pages.',
      'enable' => 'Enable on the listed pages only.',
    ),
    '#default_value' => variable_get('photoswipe_active_type', 'disable'),
  );
  $form['photoswipe']['url']['photoswipe_pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Pages'),
    '#default_value' => variable_get('photoswipe_pages', ""),
    '#description' => t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.\nAdministration and edition pages are disabled by default (%admin, %node-add, %node-edit).", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>', '%admin' => 'admin*', '%node-add' => 'node/add/*', '%node-edit' => 'node/*/edit')),
  );

  $form['photoswipe']['nodetype'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node types specific activation settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options = node_type_get_names();
  $form['photoswipe']['nodetype']['photoswipe_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable PhotoSwipe on specific content types'),
    '#options' => $options,
    '#default_value' => variable_get('photoswipe_nodetypes', array()),
    '#description' => t('By default, PhotoSwipe is loaded with any node type. If any is checked, it will be loaded only on these node types.'),
  );

  return system_settings_form($form);
}

